package edduarte.protbox.core;

import javax.crypto.SecretKey;
import java.io.File;
import java.io.Serializable;

/**
 * A Protbox Pair refers to a set of two folders: the Shared folder and the Prot folder.
 * Users must define one-to-one associations between Shared folders and the local folders
 * containing the relevant files to protect, which we call Prot folders and may be located
 * anywhere in the host file system.
 *
 * A key is generated and maintained for each Protbox Pair (called Pair key). Each Pair key
 * is either (i) randomly generated by Protbox (when the first protected file is created in
 * the corresponding Shared folder) or (ii) imported by Protbox from other users sharing the
 * corresponding Shared folder (when the Shared folder is not empty).
 *
 * @author Eduardo Duarte (<a href="mailto:emod@ua.pt">emod@ua.pt</a>)
 * @version 1.0
 */
public class ProtboxPair implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String SHARED_FOLDER_PATH;
    private String PROT_FOLDER_PATH;
    private final String PAIR_ALGORITHM;
    private final SecretKey PAIR_KEY;
    private final SecretKey INTEGRITY_KEY;


    public ProtboxPair(String sharedFolderPath,
                       String protFolderPath,
                       String cipherAlgorithm,
                       SecretKey cipherKey,
                       SecretKey integrityKey) {

        File sharedPathFile = new File(sharedFolderPath);
        File protPathFile = new File(protFolderPath);
        this.SHARED_FOLDER_PATH = sharedPathFile.getAbsolutePath();
        this.PROT_FOLDER_PATH = protPathFile.getAbsolutePath();
        this.PAIR_ALGORITHM = cipherAlgorithm;
        this.PAIR_KEY = cipherKey;
        this.INTEGRITY_KEY = integrityKey;
    }

    /**
     * Sets the configured Shared shared folder path where the encrypted files will be.
     */
    public void setProtFolderPath(String protFolderPath) {
        this.PROT_FOLDER_PATH = protFolderPath;
    }

    /**
     * Gets the configured Shared shared folder path where the encrypted files will be.
     */
    public String getSharedFolderPath() {
        return SHARED_FOLDER_PATH;
    }

    /**
     * Gets the configured Shared shared folder where the encrypted files will be.
     */
    public File getSharedFolderFile() {
        return new File(SHARED_FOLDER_PATH);
    }


    /**
     * Gets the configured Prot folder path where every file from the Shared folder will be stored in decrypted form.
     */
    public String getProtFolderPath() {
        return PROT_FOLDER_PATH;
    }


    /**
     * Gets the configured Prot folder where every file from the Shared folder will be stored in decrypted form.
     */
    public File getProtFolderFile() {
        return new File(PROT_FOLDER_PATH);
    }


    /**
     * Simple access to the algorithm used by this Pair. This is used to instantiate the Cipher
     * per execution, since the Cipher object cannot be serialized.
     */
    public String getPairAlgorithm() {
        return PAIR_ALGORITHM;
    }


    /**
     * Gets the secret key used by this Pair for encryption and decryption of files' contents and names.
     */
    public SecretKey getPairKey() {
        return PAIR_KEY;
    }


    /**
     * Gets the secret key used by this Pair for integrity checking of files' data.
     */
    public SecretKey getIntegrityKey() {
        return INTEGRITY_KEY;
    }

    @Override
    public int hashCode() {
        return SHARED_FOLDER_PATH.hashCode() * PROT_FOLDER_PATH.hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        if (this == obj) {
            return true;
        }

        if (obj instanceof ProtboxPair) {
            ProtboxPair otherPair = (ProtboxPair) obj;
            return  SHARED_FOLDER_PATH.equalsIgnoreCase(otherPair.SHARED_FOLDER_PATH) &&
                    PROT_FOLDER_PATH.equalsIgnoreCase(otherPair.PROT_FOLDER_PATH);
        }

        return false;
    }
}
